'use strict';

import { Banner, BannerAPI } from '../../api/bannerApi';
import { dispatcher } from '../../modules/dispatcher';
import { reAlert } from '../../modules/re-alert';
import { store } from '../../modules/store';
import { bannerDescriptionGetError, bannerLinkGetError, bannerTitleGetError, perShowGetError } from '../../modules/validation';
import { Form, FormProps } from '../form/form';
import { InputField } from '../input-field/input-field';
import { InputSwitch } from '../input-switch/input-switch';

/**
 * –§–æ—Ä–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
export class FormBannerEditorOptions extends Form {
    public bannerPreview: Banner;
    private selectedBanner: Banner;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     * @param {HTMLElement} parent - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    constructor(parent: HTMLElement) {
        super(parent);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
     */
    private async onSubmit(): Promise<void> {
        const inputs = this.props.inputs;

        this.selectedBanner.title = inputs.nameInput.getValue();
        this.selectedBanner.link = inputs.linkInput.getValue();
        this.selectedBanner.max_price = inputs.maxPrice.getValue();
        this.selectedBanner.description = inputs.textInput.getValue();
        this.selectedBanner.status = inputs.isActive.getValue() ? 1 : 0;

        const fileId = store.get<string>('fileId');
        if (fileId) {
            this.selectedBanner.content = fileId;
        }

        if (!this.selectedBanner.content) {
            reAlert({
                message: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                type: 'error',
                lifetimeS: '5',
            });
            return;
        }

        if (this.selectedBanner.beingCreated) {
            const response = await BannerAPI.create(this.selectedBanner);
            if (response.service.error) {
                reAlert({
                    message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                    type: 'error',
                    lifetimeS: '5',
                });
                return;
            }
            dispatcher.dispatch('banner-create');
            reAlert({
                message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç',
                type: 'success',
                lifetimeS: '5',
            });
        } else {
            const response = await BannerAPI.update(this.selectedBanner);
            if (response.service.error) {
                reAlert({
                    message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                    type: 'error',
                    lifetimeS: '5',
                });
                return;
            }
            dispatcher.dispatch('banner-update', this.selectedBanner.id);
            reAlert({
                message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç',
                type: 'success',
                lifetimeS: '5',
            });
        }
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞
     */
    private async generateDescription(): Promise<void> {
        this.props.inputs.nameInput.validate();
        const title = this.props.inputs.nameInput.getValue();
        if (!title) {
            reAlert({
                message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ä–Ω–æ',
                type: 'error',
                lifetimeS: '5',
            });
            return;
        }

        reAlert({
            message: '–û–ø–∏—Å–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥',
            type: 'success',
            lifetimeS: '5',
        });

        const response = await BannerAPI.generateDescription(title);
        if (response.service.error) {
            reAlert({
                message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è',
                type: 'error',
                lifetimeS: '5',
            });
            return;
        }

        setTimeout(() => {
            const matchNoQuotes = response.service.success.match(/^["']?(.*?)["']?$/);
            const description = matchNoQuotes ? matchNoQuotes[1] : response.service.success;
            const textInput = <HTMLInputElement>document.querySelector('input#text');
            textInput.value = description;
            const event = new Event('input', { bubbles: true });
            textInput.dispatchEvent(event);
        }, 2000);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º—É
     */
    private onInput(): void {
        const inputs = this.props.inputs;

        inputs.nameInput.validate();
        inputs.linkInput.validate();
        inputs.textInput.validate();

        this.bannerPreview = {
            title: inputs.nameInput.getValue(),
            link: inputs.linkInput.getValue(),
            description: inputs.textInput.getValue(),
            id: 0,
            content: '',
            max_price: '',
            balance: 0,
            status: 0,
            owner: 0,
        };

        dispatcher.dispatch('banner-form-input');
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞
     */
    render(): void {
        const selectedBanner = store.get<Banner>('selectedBanner');
        this.selectedBanner = selectedBanner;
        this.bannerPreview = selectedBanner;

        const props: FormProps = { inputs: {}, submitLabel: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', onSubmit: this.onSubmit.bind(this), className: 'form-block' };

        super.renderRoot(props);

        const root = this.rootElement;

        props.inputs = {
            nameInput: new InputField(root, {
                type: 'text',
                label: '–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å?',
                name: 'name',
                placeholder: '–ú—è–≥–∫–∏–µ –∏–≥—Ä—É—à–∫–∏',
                default: selectedBanner.title,
                getError: bannerTitleGetError,
            }),
            linkInput: new InputField(root, {
                type: 'text',
                label: '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫',
                name: 'link',
                placeholder: 'https://example.com',
                default: selectedBanner.link,
                getError: bannerLinkGetError,
            }),
            textInput: new InputField(root, { // TODO make textarea input
                type: 'text',
                label: '–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
                name: 'text',
                placeholder: '–¢–µ–ø–ª—ã–µ –æ–±—ä—è—Ç–∏—è –∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã–π —Å–º–µ—Ö',
                default: selectedBanner.description,
                getError: bannerDescriptionGetError,
                button: {
                    type: 'neutral',
                    label: '<img class="icon-generate" src="/static/icons/wand-magic-sparkles-solid.svg" alt="ü™Ñ">',
                    onClick: this.generateDescription.bind(this),
                },
            }),
            maxPrice: new InputField(root, {
                type: 'text',
                label: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Ä—É–±.',
                name: 'max-price',
                placeholder: '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å',
                default: selectedBanner.max_price,
                getError: perShowGetError,
            }),
            isActive: new InputSwitch(root, {
                name: 'is-active',
                label: '–ê–∫—Ç–∏–≤–Ω–æ',
                checked: selectedBanner.status != 0,
            }),
        };

        super.renderFull(props);

        props.inputs.nameInput.inputElement.addEventListener('input', this.onInput.bind(this));
        props.inputs.linkInput.inputElement.addEventListener('input', this.onInput.bind(this));
        props.inputs.textInput.inputElement.addEventListener('input', this.onInput.bind(this));
    }
}
